{
  "/home/jungyu/blog-project/blog-backend/serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "/home/jungyu/blog-project/blog-backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "blog-api-dev",
      "provider": {
        "name": "aws",
        "runtime": "provided.al2",
        "region": "ap-northeast-2",
        "stage": "dev",
        "memorySize": 256,
        "timeout": 15,
        "environment": {
          "DYNAMODB_TABLE": "JungyuBlogPosts"
        },
        "iam": {
          "role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetPostsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPosts"
              }
            },
            "GetPostLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPost"
              }
            },
            "CreatePostLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/blog-api-dev-dev-createPost"
              }
            },
            "UpdatePostLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/blog-api-dev-dev-updatePost"
              }
            },
            "DeletePostLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/blog-api-dev-dev-deletePost"
              }
            },
            "GetPostsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                  "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPosts.zip"
                },
                "Handler": "bootstrap",
                "Runtime": "provided.al2",
                "FunctionName": "blog-api-dev-dev-getPosts",
                "MemorySize": 256,
                "Timeout": 15,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "JungyuBlogPosts"
                  }
                },
                "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
              },
              "DependsOn": [
                "GetPostsLogGroup"
              ]
            },
            "GetPostLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                  "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPost.zip"
                },
                "Handler": "bootstrap",
                "Runtime": "provided.al2",
                "FunctionName": "blog-api-dev-dev-getPost",
                "MemorySize": 256,
                "Timeout": 15,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "JungyuBlogPosts"
                  }
                },
                "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
              },
              "DependsOn": [
                "GetPostLogGroup"
              ]
            },
            "CreatePostLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                  "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/createPost.zip"
                },
                "Handler": "bootstrap",
                "Runtime": "provided.al2",
                "FunctionName": "blog-api-dev-dev-createPost",
                "MemorySize": 256,
                "Timeout": 15,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "JungyuBlogPosts"
                  }
                },
                "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
              },
              "DependsOn": [
                "CreatePostLogGroup"
              ]
            },
            "UpdatePostLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                  "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/updatePost.zip"
                },
                "Handler": "bootstrap",
                "Runtime": "provided.al2",
                "FunctionName": "blog-api-dev-dev-updatePost",
                "MemorySize": 256,
                "Timeout": 15,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "JungyuBlogPosts"
                  }
                },
                "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
              },
              "DependsOn": [
                "UpdatePostLogGroup"
              ]
            },
            "DeletePostLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                  "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/deletePost.zip"
                },
                "Handler": "bootstrap",
                "Runtime": "provided.al2",
                "FunctionName": "blog-api-dev-dev-deletePost",
                "MemorySize": 256,
                "Timeout": 15,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "JungyuBlogPosts"
                  }
                },
                "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
              },
              "DependsOn": [
                "DeletePostLogGroup"
              ]
            },
            "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeletePostLambdaFunction"
                },
                "CodeSha256": "/HUVJTOOUIQMWFVGFvImc+vn5xZrI0ZwrXNwCsRZ4Dg="
              }
            },
            "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPostsLambdaFunction"
                },
                "CodeSha256": "XaIlMJWBGwO7sW7K9AWZXHvT8jlSwleFW2wpmfw+ztY="
              }
            },
            "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPostLambdaFunction"
                },
                "CodeSha256": "9pkkTtI6v3evQxffnI7neP7H8+I8s+0Axd54E9NEzFU="
              }
            },
            "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdatePostLambdaFunction"
                },
                "CodeSha256": "739C9l8pdzNEmEmeNOlgB18/Dqahzzl7guIKiiv01+k="
              }
            },
            "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreatePostLambdaFunction"
                },
                "CodeSha256": "k3rXDf9jTLoRgXtuf0jVfAuuzEA6mDxJhzLWTqOlny4="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-blog-api-dev",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourcePosts": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "posts",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostsPostidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "PathPart": "{postId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsPostidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsPostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPostsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPostsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsPostidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsPostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPostLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPostLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePosts"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreatePostLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreatePostLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsPostidVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsPostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdatePostLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdatePostLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostsPostidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostsPostidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeletePostLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeletePostLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1753178149863": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodPostsOptions",
                "ApiGatewayMethodPostsPostidVarOptions",
                "ApiGatewayMethodPostsGet",
                "ApiGatewayMethodPostsPostidVarGet",
                "ApiGatewayMethodPostsPost",
                "ApiGatewayMethodPostsPostidVarPut",
                "ApiGatewayMethodPostsPostidVarDelete"
              ]
            },
            "GetPostsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPostsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPostLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPostLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreatePostLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreatePostLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdatePostLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdatePostLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeletePostLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeletePostLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
              "Export": {
                "Name": "sls-blog-api-dev-dev-ServerlessDeploymentBucketName"
              }
            },
            "DeletePostLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw"
              },
              "Export": {
                "Name": "sls-blog-api-dev-dev-DeletePostLambdaFunctionQualifiedArn"
              }
            },
            "GetPostsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI"
              },
              "Export": {
                "Name": "sls-blog-api-dev-dev-GetPostsLambdaFunctionQualifiedArn"
              }
            },
            "GetPostLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8"
              },
              "Export": {
                "Name": "sls-blog-api-dev-dev-GetPostLambdaFunctionQualifiedArn"
              }
            },
            "UpdatePostLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4"
              },
              "Export": {
                "Name": "sls-blog-api-dev-dev-UpdatePostLambdaFunctionQualifiedArn"
              }
            },
            "CreatePostLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs"
              },
              "Export": {
                "Name": "sls-blog-api-dev-dev-CreatePostLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-blog-api-dev-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "individually": true,
        "exclude": [
          "./**"
        ],
        "artifactsS3KeyDirname": "serverless/blog-api-dev/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
        "artifactDirectoryName": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z"
      },
      "plugins": [
        "serverless-go-plugin"
      ],
      "custom": {
        "go": {
          "goBuildMode": "mod",
          "goBuildEnvironment": {
            "GO111MODULE": "on",
            "GOOS": "linux",
            "GOARCH": "amd64"
          },
          "strip": true
        }
      },
      "functions": {
        "getPosts": {
          "handler": "bootstrap",
          "package": {
            "artifact": "getPosts/getPosts.zip"
          },
          "events": [
            {
              "http": {
                "path": "posts",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "blog-api-dev-dev-getPosts",
          "memory": 256,
          "timeout": 15,
          "runtime": "provided.al2",
          "vpc": {},
          "versionLogicalId": "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI"
        },
        "getPost": {
          "handler": "bootstrap",
          "package": {
            "artifact": "getPost/getPost.zip"
          },
          "events": [
            {
              "http": {
                "path": "posts/{postId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "blog-api-dev-dev-getPost",
          "memory": 256,
          "timeout": 15,
          "runtime": "provided.al2",
          "vpc": {},
          "versionLogicalId": "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8"
        },
        "createPost": {
          "handler": "bootstrap",
          "package": {
            "artifact": "createPost/createPost.zip"
          },
          "events": [
            {
              "http": {
                "path": "posts",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "blog-api-dev-dev-createPost",
          "memory": 256,
          "timeout": 15,
          "runtime": "provided.al2",
          "vpc": {},
          "versionLogicalId": "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs"
        },
        "updatePost": {
          "handler": "bootstrap",
          "package": {
            "artifact": "updatePost/updatePost.zip"
          },
          "events": [
            {
              "http": {
                "path": "posts/{postId}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "blog-api-dev-dev-updatePost",
          "memory": 256,
          "timeout": 15,
          "runtime": "provided.al2",
          "vpc": {},
          "versionLogicalId": "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4"
        },
        "deletePost": {
          "handler": "bootstrap",
          "package": {
            "artifact": "deletePost/deletePost.zip"
          },
          "events": [
            {
              "http": {
                "path": "posts/{postId}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "blog-api-dev-dev-deletePost",
          "memory": 256,
          "timeout": 15,
          "runtime": "provided.al2",
          "vpc": {},
          "versionLogicalId": "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw"
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "provided.al2",
      "region": "ap-northeast-2",
      "stage": "dev",
      "memorySize": 256,
      "timeout": 15,
      "environment": {
        "DYNAMODB_TABLE": "JungyuBlogPosts"
      },
      "iam": {
        "role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetPostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPosts"
            }
          },
          "GetPostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPost"
            }
          },
          "CreatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/blog-api-dev-dev-createPost"
            }
          },
          "UpdatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/blog-api-dev-dev-updatePost"
            }
          },
          "DeletePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/blog-api-dev-dev-deletePost"
            }
          },
          "GetPostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPosts.zip"
              },
              "Handler": "bootstrap",
              "Runtime": "provided.al2",
              "FunctionName": "blog-api-dev-dev-getPosts",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "JungyuBlogPosts"
                }
              },
              "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
            },
            "DependsOn": [
              "GetPostsLogGroup"
            ]
          },
          "GetPostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPost.zip"
              },
              "Handler": "bootstrap",
              "Runtime": "provided.al2",
              "FunctionName": "blog-api-dev-dev-getPost",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "JungyuBlogPosts"
                }
              },
              "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
            },
            "DependsOn": [
              "GetPostLogGroup"
            ]
          },
          "CreatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/createPost.zip"
              },
              "Handler": "bootstrap",
              "Runtime": "provided.al2",
              "FunctionName": "blog-api-dev-dev-createPost",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "JungyuBlogPosts"
                }
              },
              "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
            },
            "DependsOn": [
              "CreatePostLogGroup"
            ]
          },
          "UpdatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/updatePost.zip"
              },
              "Handler": "bootstrap",
              "Runtime": "provided.al2",
              "FunctionName": "blog-api-dev-dev-updatePost",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "JungyuBlogPosts"
                }
              },
              "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
            },
            "DependsOn": [
              "UpdatePostLogGroup"
            ]
          },
          "DeletePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
                "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/deletePost.zip"
              },
              "Handler": "bootstrap",
              "Runtime": "provided.al2",
              "FunctionName": "blog-api-dev-dev-deletePost",
              "MemorySize": 256,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "JungyuBlogPosts"
                }
              },
              "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
            },
            "DependsOn": [
              "DeletePostLogGroup"
            ]
          },
          "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePostLambdaFunction"
              },
              "CodeSha256": "/HUVJTOOUIQMWFVGFvImc+vn5xZrI0ZwrXNwCsRZ4Dg="
            }
          },
          "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPostsLambdaFunction"
              },
              "CodeSha256": "XaIlMJWBGwO7sW7K9AWZXHvT8jlSwleFW2wpmfw+ztY="
            }
          },
          "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPostLambdaFunction"
              },
              "CodeSha256": "9pkkTtI6v3evQxffnI7neP7H8+I8s+0Axd54E9NEzFU="
            }
          },
          "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatePostLambdaFunction"
              },
              "CodeSha256": "739C9l8pdzNEmEmeNOlgB18/Dqahzzl7guIKiiv01+k="
            }
          },
          "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePostLambdaFunction"
              },
              "CodeSha256": "k3rXDf9jTLoRgXtuf0jVfAuuzEA6mDxJhzLWTqOlny4="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-blog-api-dev",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePosts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "posts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostsPostidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "PathPart": "{postId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostsPostidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsPostidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPostsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPostsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsPostidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsPostidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreatePostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsPostidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsPostidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdatePostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsPostidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsPostidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeletePostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1753178149863": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPostsOptions",
              "ApiGatewayMethodPostsPostidVarOptions",
              "ApiGatewayMethodPostsGet",
              "ApiGatewayMethodPostsPostidVarGet",
              "ApiGatewayMethodPostsPost",
              "ApiGatewayMethodPostsPostidVarPut",
              "ApiGatewayMethodPostsPostidVarDelete"
            ]
          },
          "GetPostsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdatePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
            "Export": {
              "Name": "sls-blog-api-dev-dev-ServerlessDeploymentBucketName"
            }
          },
          "DeletePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw"
            },
            "Export": {
              "Name": "sls-blog-api-dev-dev-DeletePostLambdaFunctionQualifiedArn"
            }
          },
          "GetPostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI"
            },
            "Export": {
              "Name": "sls-blog-api-dev-dev-GetPostsLambdaFunctionQualifiedArn"
            }
          },
          "GetPostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8"
            },
            "Export": {
              "Name": "sls-blog-api-dev-dev-GetPostLambdaFunctionQualifiedArn"
            }
          },
          "UpdatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4"
            },
            "Export": {
              "Name": "sls-blog-api-dev-dev-UpdatePostLambdaFunctionQualifiedArn"
            }
          },
          "CreatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs"
            },
            "Export": {
              "Name": "sls-blog-api-dev-dev-CreatePostLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-blog-api-dev-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: blog-api-dev\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: provided.al2\r\n  region: ap-northeast-2\r\n  stage: dev\r\n  memorySize: 256\r\n  timeout: 15\r\n  environment:\r\n    DYNAMODB_TABLE: JungyuBlogPosts # Terraform으로 생성된 테이블 이름으로 변경\r\n  iam:\r\n    role: arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole # Terraform으로 생성된 IAM Role ARN으로 변경\r\n\r\npackage:\r\n  individually: true # 각 함수별로 패키징합니다.\r\n  # 서비스 레벨 exclude는 Go 바이너리에 불필요한 파일이 없도록 최소화합니다.\r\n  exclude:\r\n    - ./** # 모든 파일을 일단 제외 (기본값)\r\n    # 아래 include 패턴에서 명시된 파일 외에는 모두 제외됩니다.\r\n    # 각 함수의 package.artifact에서 직접 zip 파일을 지정하므로, 여기에 추가적인 패턴이 필요하지 않습니다.\r\n    # 혹시 Go 모듈 파일(go.mod, go.sum)이 각 zip에 포함되어야 한다면, 해당 함수 artifact zip에 직접 포함시켜야 합니다.\r\n    # 현재는 Lambda 실행에 필수적이지 않으므로 제외된 상태입니다.\r\n\r\nplugins:\r\n  - serverless-go-plugin # 여전히 Go 빌드 환경 설정을 위해 사용합니다. (자동 빌드는 안 됨)\r\n\r\ncustom:\r\n  go:\r\n    # 플러그인이 자동으로 빌드하는 대신, 수동 빌드를 위한 환경만 설정합니다.\r\n    goBuildMode: \"mod\"\r\n    goBuildEnvironment:\r\n      GO111MODULE: \"on\"\r\n      GOOS: linux\r\n      GOARCH: amd64\r\n    strip: true # 바이너리 용량 최적화 (수동 빌드 시에도 고려)\r\n    # bin 또는 buildTarget 설정은 이제 사용하지 않습니다.\r\n    # 이 플러그인은 Go 빌드를 위한 환경 변수를 제공하는 역할로만 사용합니다.\r\n\r\nfunctions:\r\n  getPosts:\r\n    handler: bootstrap\r\n    # 직접 빌드된 바이너리를 .zip 파일로 아티팩트화합니다.\r\n    package:\r\n      artifact: getPosts/getPosts.zip # <--- 수정됨: 압축 파일 이름을 명시합니다.\r\n    events:\r\n      - http:\r\n          path: posts\r\n          method: get\r\n          cors: true\r\n\r\n  getPost:\r\n    handler: bootstrap\r\n    package:\r\n      artifact: getPost/getPost.zip # <--- 수정됨\r\n    events:\r\n      - http:\r\n          path: posts/{postId}\r\n          method: get\r\n          cors: true\r\n\r\n  createPost:\r\n    handler: bootstrap\r\n    package:\r\n      artifact: createPost/createPost.zip # <--- 수정됨\r\n    events:\r\n      - http:\r\n          path: posts\r\n          method: post\r\n          cors: true\r\n\r\n  updatePost:\r\n    handler: bootstrap\r\n    package:\r\n      artifact: updatePost/updatePost.zip # <--- 수정됨\r\n    events:\r\n      - http:\r\n          path: posts/{postId}\r\n          method: put\r\n          cors: true\r\n\r\n  deletePost:\r\n    handler: bootstrap\r\n    package:\r\n      artifact: deletePost/deletePost.zip # <--- 수정됨\r\n    events:\r\n      - http:\r\n          path: posts/{postId}\r\n          method: delete\r\n          cors: true",
    "command": [
      "deploy"
    ],
    "options": {
      "debug": "*"
    },
    "orgId": "b3310596-c718-43af-a350-b7ea6b0f2d85",
    "orgName": "jungyuya",
    "userId": "Wq1lF8J6WhcLzfH4gf",
    "userName": "jungyuya",
    "serviceProviderAwsAccountId": "786382940028",
    "serviceProviderAwsCfStackName": "blog-api-dev-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-northeast-2:786382940028:stack/blog-api-dev-dev/e5cb0cb0-66a2-11f0-85b7-0ad54afc4f01",
    "serviceProviderAwsCfStackCreated": "2025-07-22T02:23:47.533Z",
    "serviceProviderAwsCfStackUpdated": "2025-07-22T09:34:18.199Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeletePostLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-northeast-2:786382940028:function:blog-api-dev-dev-deletePost:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-blog-api-dev-dev-DeletePostLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreatePostLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-northeast-2:786382940028:function:blog-api-dev-dev-createPost:14",
        "Description": "Current Lambda function version",
        "ExportName": "sls-blog-api-dev-dev-CreatePostLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdatePostLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-northeast-2:786382940028:function:blog-api-dev-dev-updatePost:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-blog-api-dev-dev-UpdatePostLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPostLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-northeast-2:786382940028:function:blog-api-dev-dev-getPost:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-blog-api-dev-dev-GetPostLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPostsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-northeast-2:786382940028:function:blog-api-dev-dev-getPosts:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-blog-api-dev-dev-GetPostsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://ty88vdbnzl.execute-api.ap-northeast-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-blog-api-dev-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
        "ExportName": "sls-blog-api-dev-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetPostsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPosts"
          }
        },
        "GetPostLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPost"
          }
        },
        "CreatePostLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/blog-api-dev-dev-createPost"
          }
        },
        "UpdatePostLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/blog-api-dev-dev-updatePost"
          }
        },
        "DeletePostLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/blog-api-dev-dev-deletePost"
          }
        },
        "GetPostsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
              "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPosts.zip"
            },
            "Handler": "bootstrap",
            "Runtime": "provided.al2",
            "FunctionName": "blog-api-dev-dev-getPosts",
            "MemorySize": 256,
            "Timeout": 15,
            "Environment": {
              "Variables": {
                "DYNAMODB_TABLE": "JungyuBlogPosts"
              }
            },
            "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
          },
          "DependsOn": [
            "GetPostsLogGroup"
          ]
        },
        "GetPostLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
              "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPost.zip"
            },
            "Handler": "bootstrap",
            "Runtime": "provided.al2",
            "FunctionName": "blog-api-dev-dev-getPost",
            "MemorySize": 256,
            "Timeout": 15,
            "Environment": {
              "Variables": {
                "DYNAMODB_TABLE": "JungyuBlogPosts"
              }
            },
            "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
          },
          "DependsOn": [
            "GetPostLogGroup"
          ]
        },
        "CreatePostLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
              "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/createPost.zip"
            },
            "Handler": "bootstrap",
            "Runtime": "provided.al2",
            "FunctionName": "blog-api-dev-dev-createPost",
            "MemorySize": 256,
            "Timeout": 15,
            "Environment": {
              "Variables": {
                "DYNAMODB_TABLE": "JungyuBlogPosts"
              }
            },
            "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
          },
          "DependsOn": [
            "CreatePostLogGroup"
          ]
        },
        "UpdatePostLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
              "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/updatePost.zip"
            },
            "Handler": "bootstrap",
            "Runtime": "provided.al2",
            "FunctionName": "blog-api-dev-dev-updatePost",
            "MemorySize": 256,
            "Timeout": 15,
            "Environment": {
              "Variables": {
                "DYNAMODB_TABLE": "JungyuBlogPosts"
              }
            },
            "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
          },
          "DependsOn": [
            "UpdatePostLogGroup"
          ]
        },
        "DeletePostLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
              "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/deletePost.zip"
            },
            "Handler": "bootstrap",
            "Runtime": "provided.al2",
            "FunctionName": "blog-api-dev-dev-deletePost",
            "MemorySize": 256,
            "Timeout": 15,
            "Environment": {
              "Variables": {
                "DYNAMODB_TABLE": "JungyuBlogPosts"
              }
            },
            "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
          },
          "DependsOn": [
            "DeletePostLogGroup"
          ]
        },
        "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeletePostLambdaFunction"
            },
            "CodeSha256": "/HUVJTOOUIQMWFVGFvImc+vn5xZrI0ZwrXNwCsRZ4Dg="
          }
        },
        "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetPostsLambdaFunction"
            },
            "CodeSha256": "XaIlMJWBGwO7sW7K9AWZXHvT8jlSwleFW2wpmfw+ztY="
          }
        },
        "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetPostLambdaFunction"
            },
            "CodeSha256": "9pkkTtI6v3evQxffnI7neP7H8+I8s+0Axd54E9NEzFU="
          }
        },
        "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdatePostLambdaFunction"
            },
            "CodeSha256": "739C9l8pdzNEmEmeNOlgB18/Dqahzzl7guIKiiv01+k="
          }
        },
        "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreatePostLambdaFunction"
            },
            "CodeSha256": "k3rXDf9jTLoRgXtuf0jVfAuuzEA6mDxJhzLWTqOlny4="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-blog-api-dev",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourcePosts": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "posts",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePostsPostidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePosts"
            },
            "PathPart": "{postId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPostsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePosts"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPostsPostidVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePostsPostidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPostsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePosts"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetPostsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetPostsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodPostsPostidVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePostsPostidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetPostLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetPostLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodPostsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePosts"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreatePostLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreatePostLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodPostsPostidVarPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePostsPostidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdatePostLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdatePostLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodPostsPostidVarDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePostsPostidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DeletePostLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DeletePostLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1753178149863": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodPostsOptions",
            "ApiGatewayMethodPostsPostidVarOptions",
            "ApiGatewayMethodPostsGet",
            "ApiGatewayMethodPostsPostidVarGet",
            "ApiGatewayMethodPostsPost",
            "ApiGatewayMethodPostsPostidVarPut",
            "ApiGatewayMethodPostsPostidVarDelete"
          ]
        },
        "GetPostsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetPostsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetPostLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetPostLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreatePostLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreatePostLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdatePostLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdatePostLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DeletePostLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeletePostLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
          "Export": {
            "Name": "sls-blog-api-dev-dev-ServerlessDeploymentBucketName"
          }
        },
        "DeletePostLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw"
          },
          "Export": {
            "Name": "sls-blog-api-dev-dev-DeletePostLambdaFunctionQualifiedArn"
          }
        },
        "GetPostsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI"
          },
          "Export": {
            "Name": "sls-blog-api-dev-dev-GetPostsLambdaFunctionQualifiedArn"
          }
        },
        "GetPostLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8"
          },
          "Export": {
            "Name": "sls-blog-api-dev-dev-GetPostLambdaFunctionQualifiedArn"
          }
        },
        "UpdatePostLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4"
          },
          "Export": {
            "Name": "sls-blog-api-dev-dev-UpdatePostLambdaFunctionQualifiedArn"
          }
        },
        "CreatePostLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs"
          },
          "Export": {
            "Name": "sls-blog-api-dev-dev-CreatePostLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-blog-api-dev-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}