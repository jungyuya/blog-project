{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GetPostsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPosts"
      }
    },
    "GetPostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/blog-api-dev-dev-getPost"
      }
    },
    "CreatePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/blog-api-dev-dev-createPost"
      }
    },
    "UpdatePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/blog-api-dev-dev-updatePost"
      }
    },
    "DeletePostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/blog-api-dev-dev-deletePost"
      }
    },
    "GetPostsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
          "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPosts.zip"
        },
        "Handler": "bootstrap",
        "Runtime": "provided.al2",
        "FunctionName": "blog-api-dev-dev-getPosts",
        "MemorySize": 256,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "JungyuBlogPosts"
          }
        },
        "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
      },
      "DependsOn": [
        "GetPostsLogGroup"
      ]
    },
    "GetPostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
          "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/getPost.zip"
        },
        "Handler": "bootstrap",
        "Runtime": "provided.al2",
        "FunctionName": "blog-api-dev-dev-getPost",
        "MemorySize": 256,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "JungyuBlogPosts"
          }
        },
        "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
      },
      "DependsOn": [
        "GetPostLogGroup"
      ]
    },
    "CreatePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
          "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/createPost.zip"
        },
        "Handler": "bootstrap",
        "Runtime": "provided.al2",
        "FunctionName": "blog-api-dev-dev-createPost",
        "MemorySize": 256,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "JungyuBlogPosts"
          }
        },
        "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
      },
      "DependsOn": [
        "CreatePostLogGroup"
      ]
    },
    "UpdatePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
          "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/updatePost.zip"
        },
        "Handler": "bootstrap",
        "Runtime": "provided.al2",
        "FunctionName": "blog-api-dev-dev-updatePost",
        "MemorySize": 256,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "JungyuBlogPosts"
          }
        },
        "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
      },
      "DependsOn": [
        "UpdatePostLogGroup"
      ]
    },
    "DeletePostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
          "S3Key": "serverless/blog-api-dev/dev/1753178156287-2025-07-22T09:55:56.287Z/deletePost.zip"
        },
        "Handler": "bootstrap",
        "Runtime": "provided.al2",
        "FunctionName": "blog-api-dev-dev-deletePost",
        "MemorySize": 256,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "JungyuBlogPosts"
          }
        },
        "Role": "arn:aws:iam::786382940028:role/JungyuBlogLambdaExecutionRole"
      },
      "DependsOn": [
        "DeletePostLogGroup"
      ]
    },
    "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeletePostLambdaFunction"
        },
        "CodeSha256": "/HUVJTOOUIQMWFVGFvImc+vn5xZrI0ZwrXNwCsRZ4Dg="
      }
    },
    "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPostsLambdaFunction"
        },
        "CodeSha256": "XaIlMJWBGwO7sW7K9AWZXHvT8jlSwleFW2wpmfw+ztY="
      }
    },
    "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPostLambdaFunction"
        },
        "CodeSha256": "9pkkTtI6v3evQxffnI7neP7H8+I8s+0Axd54E9NEzFU="
      }
    },
    "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePostLambdaFunction"
        },
        "CodeSha256": "739C9l8pdzNEmEmeNOlgB18/Dqahzzl7guIKiiv01+k="
      }
    },
    "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePostLambdaFunction"
        },
        "CodeSha256": "k3rXDf9jTLoRgXtuf0jVfAuuzEA6mDxJhzLWTqOlny4="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-blog-api-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourcePosts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "posts",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePostsPostidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePosts"
        },
        "PathPart": "{postId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePosts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostsPostidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostsPostidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPostsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePosts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPostsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetPostsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPostsPostidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostsPostidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPostLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetPostLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPostsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePosts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreatePostLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreatePostLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPostsPostidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostsPostidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdatePostLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdatePostLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPostsPostidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostsPostidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeletePostLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeletePostLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1753178149863": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodPostsOptions",
        "ApiGatewayMethodPostsPostidVarOptions",
        "ApiGatewayMethodPostsGet",
        "ApiGatewayMethodPostsPostidVarGet",
        "ApiGatewayMethodPostsPost",
        "ApiGatewayMethodPostsPostidVarPut",
        "ApiGatewayMethodPostsPostidVarDelete"
      ]
    },
    "GetPostsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPostsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetPostLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreatePostLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdatePostLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeletePostLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeletePostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-ap-northeast-2-8b2cd224-899a",
      "Export": {
        "Name": "sls-blog-api-dev-dev-ServerlessDeploymentBucketName"
      }
    },
    "DeletePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeletePostLambdaVersiontQa5VIRcE984Nq0TgzNwbgHVNMsApQEEtHX3Im3bw"
      },
      "Export": {
        "Name": "sls-blog-api-dev-dev-DeletePostLambdaFunctionQualifiedArn"
      }
    },
    "GetPostsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPostsLambdaVersion9p1gmnkPzO01Y9gM2stcAEPlckWIboAfSahAcNPmlI"
      },
      "Export": {
        "Name": "sls-blog-api-dev-dev-GetPostsLambdaFunctionQualifiedArn"
      }
    },
    "GetPostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPostLambdaVersionFlSacRNLmWUQahnQYH3Upv02o82l6UveEAUFpRT8"
      },
      "Export": {
        "Name": "sls-blog-api-dev-dev-GetPostLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePostLambdaVersionnX1L1mF7r8ipfsvrAmJy2Vo5GLOGuUrSCndkpK9G4"
      },
      "Export": {
        "Name": "sls-blog-api-dev-dev-UpdatePostLambdaFunctionQualifiedArn"
      }
    },
    "CreatePostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePostLambdaVersionsLNForSGFsnhRzqkctDmJjRdhEhx6q9jothz1YzzPEs"
      },
      "Export": {
        "Name": "sls-blog-api-dev-dev-CreatePostLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-blog-api-dev-dev-ServiceEndpoint"
      }
    }
  }
}