# .github/workflows/frontend-deploy.yml

name: Frontend CI/CD (Next.js)

# 이 워크플로우는 'main' 브랜치에 'blog-frontend/' 경로의 변경 사항이 푸시될 때 실행됩니다.
on:
  push:
    branches:
      - main
    paths:
      - 'blog-frontend/**'
      - '.github/workflows/frontend-deploy.yml'

permissions:
  id-token: write   # OIDC를 통해 AWS 자격 증명 요청
  contents: read    # 리포지토리에서 코드 체크아웃

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'blog-frontend/package-lock.json'

      # 3. AWS 자격 증명 설정 (OIDC)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2

      # 4. 프론트엔드 종속성 설치
      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: blog-frontend

      # 5. Next.js 애플리케이션 빌드
      - name: Build Next.js Application
        run: npm run build
        working-directory: blog-frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.BACKEND_API_URL }}

      # 5.5. Next.js 정적 내보내기(export) = out/ 생성
      - name: Export Static HTML
        run: npm run export
        working-directory: blog-frontend

      # 6. 빌드된 정적 파일 S3 업로드
      - name: Upload to S3
        run: aws s3 sync ./out/ s3://blog.jungyu.store --delete
        working-directory: blog-frontend

      # 7. CloudFront 캐시 무효화
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        env:
          AWS_DEFAULT_REGION: ap-northeast-2
