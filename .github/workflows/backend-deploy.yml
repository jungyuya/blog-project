# .github/workflows/backend-deploy.yml

name: Backend CI/CD (Go Lambda)

# 이 워크플로우는 'main' 브랜치에 'blog-backend/' 경로의 변경 사항이 푸시될 때 실행됩니다.
on:
  push:
    branches:
      - main
    paths: # blog-backend 디렉토리 내 변경 사항만 감지
      - "blog-backend/**"
      - ".github/workflows/backend-deploy.yml" # 워크플로우 파일 자체의 변경도 감지

# 작업을 실행할 권한을 정의합니다. OIDC를 사용하기 위해 필요합니다.
permissions:
  id-token: write # OIDC를 통해 임시 AWS 자격 증명을 요청하기 위해 필요
  contents: read # 리포지토리에서 코드를 체크아웃하기 위해 필요

jobs:
  deploy:
    runs-on: ubuntu-latest # 워크플로우를 실행할 가상 환경 (GitHub 호스팅 러너)
    steps:
      # 1. 코드 체크아웃: GitHub 저장소에서 코드를 러너로 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Go 환경 설정: 지정된 Go 버전을 설치하고 모듈 캐싱을 활성화하여 빌드 속도를 높입니다.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          cache: true # Go 모듈 캐싱 활성화

      # 3. AWS Credentials 설정 (OIDC 사용): GitHub Actions가 AWS 리소스에 안전하게 접근하도록 임시 자격 증명을 구성합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} # GitHub Secret에서 AWS IAM 역할 ARN 가져오기
          aws-region: ap-northeast-2

      # 4. Node.js 환경 설정: Serverless Framework 설치를 위해 Node.js 환경을 설정합니다.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: "blog-backend/package-lock.json" # npm 캐시 경로 지정

      # 5. Serverless Framework 및 프로젝트 의존성 설치: Serverless CLI를 전역으로 설치하고, blog-backend의 package.json 의존성을 설치합니다.
      - name: Install Serverless Framework and project dependencies
        run: |
          npm install -g serverless # Serverless CLI를 전역으로 설치
          npm install               # blog-backend/package.json 의존성 설치
        working-directory: blog-backend # blog-backend 디렉토리에서 명령 실행

      # 6. Go 모듈 다운로드 및 정리: blog-backend 프로젝트의 모든 Go 모듈 의존성을 정리합니다.
      #    이 스텝은 GitHub Actions 환경에서 Go 모듈을 올바르게 다운로드하고 정리하도록 보장합니다.
      - name: Go mod tidy for project
        run: go mod tidy -compat=1.24 # 현재 Go 버전에 맞춘 호환성 모드
        working-directory: blog-backend # blog-backend 디렉토리에서 실행

      # 7. 백엔드 테스트 (선택 사항이지만 강력 권장): Go 테스트 코드가 있다면 이 단계를 추가하여 코드 품질을 확보합니다.
      #    현재는 테스트 코드가 없으므로 주석 처리하거나, 간단한 테스트 로직을 추가할 수 있습니다.
      #- name: Run Backend Tests
      #  run: go test ./...
      #  working-directory: blog-backend # blog-backend 디렉토리에서 명령 실행

      # 8. 백엔드 배포: Makefile의 'deploy' 타겟을 호출하여 Go 바이너리 빌드 및 Serverless 배포를 수행합니다.
      - name: Deploy Backend
        run: make deploy # Makefile의 deploy 타겟 호출
        working-directory: blog-backend # blog-backend 디렉토리에서 명령 실행
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }} # Serverless 대시보드 연동용 (필요시)